# written by: Adam Mullins - adam.l.m@gmail.com

The included C++ program will generate all Euler circuits on the
complete graph of 5 vertices. By default it generates all circuits on
only one vertex, but using the -a switch will cause it to generate all
circuits on all vertices.

The program writes the paths to stdout, one path per line. This makes
it easy to process the output on the command line.

->    Build           : g++ UnDigraph.cpp main.cpp -o euler
->    Execute         : ./euler > circuits
->    Count circuits  : wc -l circuits
->    Verify unique   : sort circuits | uniq -u | wc -l



Note that 'wc -l circuits' counts 528 circuits on a single vertex. The
available literature suggests that there are instead 264.  Observe
that (528 / 2) = 264.

This raises the question of circuit equality, namely, are circuits like ABCDEA
and AEDCBA equal, or do they represent two different ways to walk the edges?

Since I can see arguments for both sides, I also wrote a small script to prune
away circuits that might be considered duplicates.

->    Prune 	      : python prune.py < circuits > prunes
->    Count prunes  : wc -l prunes



Build Details, Notes, &c:
This was built and tested in Arch Linux. It assumes your system has
g++, the standard libs for C++, python3, and the usual gnu utils like
wc and an sh-like.

prune.py will not work in python2, as it uses print(), rather than the
statement 'print'.

Another interesting observation about circuit equality is whether or not
rotations of circuits are equal, i.e., is 'ABCDEA' equal to 'BCDEAB'. For
instance, both paths contain the same edge-sets: [ (AB, BC, CD, DE, EA) and
(BC, CD, DE, EA, AB) ]. Since the original assignment only asked about
circuits on a single node, I haven't explored this further.
